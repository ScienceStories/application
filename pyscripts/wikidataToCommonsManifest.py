"""Script to Generate a IIIF Manifest from a Wikidata Identifier."""
import sys
import requests
import json
from iiif_prezi.factory import ManifestFactory
from html_sanitizer import Sanitizer
from html2text import HTML2Text

# Configure unicode support instead of ASCII
reload(sys)
sys.setdefaultencoding('utf8')

# CATEGORY_STRING = "Grace Hopper"
# MANIFEST_URL = "http://example.com"
CATEGORY_STRING = sys.argv[1]
MANIFEST_URL = sys.argv[2]
COMMONS_CAT_TEMPLATE = u"https://commons.wikimedia.org/w/api.php?action=query&\
                        generator=categorymembers&iiurlwidth={0}&gcmtitle=\
                        Category:{1}&gcmlimit=500&gcmtype=file&prop=imageinfo&\
                        iiprop=url|timestamp|user|mime|extmetadata&format=json"
HEADERS = {'user-agent': 'Science Stories API (info@sciencestories.io)'}
sanitizer = Sanitizer({
    'tags': {
        'a', 'b', 'br', 'i', 'img', 'p', 'span'
    },
    'attributes': {
        'a': ('href'),
        'img': ('src', 'alt')
    },
    'empty': {'br'},
    'separate': {'a', 'p'}
})
html_converter = HTML2Text()
html_converter.ignore_links = True


def main():
    """Call Main Function."""
    return iiif_cat_manifest(CATEGORY_STRING)


def safe_str(obj):
    """Return unicode encoding."""
    return unicode(obj)


def sanitise(html):
    """Sanitize html."""
    return sanitizer.sanitize(safe_str(html))


def get_image_details(titles, size):
    """Query wikimedia API for image details."""
    url = COMMONS_CAT_TEMPLATE.format(str(size), titles.replace('?', '%3F'))
    session = requests.Session()
    session.headers.update(HEADERS)
    resp = session.get(url)
    return resp.json().get('query', {}).get('pages', {})


def set_canvas_metadata(wiki_info, canvas):
    """Parse metadata for canvas."""
    extmetadata = wiki_info.get('extmetadata', {})
    description = extmetadata.get("ImageDescription")
    if description:
        sanitized_desc = sanitise(description.get('value', ''))
        canvas.label = html_converter.handle(sanitized_desc)
        canvas.set_metadata({'Media Description': sanitized_desc})
        del extmetadata["ImageDescription"]

    if 'user' in wiki_info:
        canvas.set_metadata({"Wikipedia user": wiki_info['user']})
    for key in extmetadata:
        value = extmetadata[key].get('value', None)
        if key == "LicenseUrl":
            canvas.license = value
        canvas.set_metadata({key: sanitise(value)})


def manifest_from_category(wiki_category):
    """Make manifest from wikimedia category."""
    image_pages = []
    thumbnail_images = {}
    large_images = get_image_details(wiki_category, 1600)
    image_pages.extend(list(large_images.values()))
    thumbnail_images.update(get_image_details(wiki_category, 100))
    return make_manifest_json(image_pages, thumbnail_images, MANIFEST_URL)


def make_manifest_json(image_pages, thumbnail_images, identifier, page=None):
    """Generate the raw json for manifest."""
    fac = ManifestFactory()
    fac.set_base_prezi_uri(identifier)
    fac.set_debug('error')
    if page is None:
        page = {
            "title": "Media on Wikimedia Commons with the Category: {}"
                     .format(CATEGORY_STRING),
            "extract": "Generated by the ScienceStories.io API"
        }
    manifest = fac.manifest(ident=identifier, label=page['title'])
    manifest.description = sanitise(page['extract'])
    sequence = manifest.sequence(ident="normal", label="default order")
    for image_page in image_pages:
        page_id = image_page.get('pageid', None)
        wiki_info = image_page.get('imageinfo', [None])[0]
        # TODO: Extend support for more MIME Types
        # Currently universalviewer does not support: "image/tiff"
        verified_mimes = ["image/jpeg", "image/png"]
        if wiki_info is not None and wiki_info['mime'] in verified_mimes:
            canvas = sequence.canvas(ident='c%s' % page_id,
                                     label=image_page['title'])
            canvas.set_hw(wiki_info['thumbheight'], wiki_info['thumbwidth'])
            set_canvas_metadata(wiki_info, canvas)
            anno = canvas.annotation(ident='a%s' % page_id)
            img = anno.image(ident=wiki_info['thumburl'], iiif=False)
            img.set_hw(wiki_info['thumbheight'], wiki_info['thumbwidth'])
            thumb_page = thumbnail_images.get(str(page_id), None)
            if thumb_page is not None:
                thumb_info = thumb_page['imageinfo'][0]
                canvas.thumbnail = fac.image(ident=thumb_info['thumburl'])
                canvas.thumbnail.format = "image/jpeg"
                canvas.thumbnail.set_hw(thumb_info['thumbheight'],
                                        thumb_info['thumbwidth'])
    manifest_serialized = manifest.toJSON(top=True)
    return manifest_serialized


def iiif_cat_manifest(wiki_slug):
    """Create raw manifest json and convert into string."""
    manifest = manifest_from_category(wiki_slug)

    return json.dumps(manifest)


if __name__ == "__main__":
    print(main())
